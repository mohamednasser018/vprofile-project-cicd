pipeline {
    agent any
    tools {
        // Define Maven and JDK tools
        maven "maven3"
        jdk "my-jdk11"
    }
    environment {
        // Define environment variables
        SNAP_REPO = 'vprofile-snapshot' 
        CENTRAL_REPO = 'vpro-maven-central'
        RELEASE_REPO = 'vprofile-release'
        NEXUS_GRP_REPO = 'vpro-maven-group'
        NEXUS_USER = 'admin'
        NEXUS_PASS = 'admin123'
        NEXUSIP = '172.31.1.222'
        NEXUSPORT = '8081'
        NEXUS_LOGIN = 'nexuslogin'
        SONARSERVER = 'sonarserver'
        SONARSCANNER = 'sonarscanner'
        registrycredential = 'ecr:us-east-1:awscreds'
        appRegistry = '242751928520.dkr.ecr.us-east-1.amazonaws.com/vprofilecicd'
        vprofileRegistry = 'https://242751928520.dkr.ecr.us-east-1.amazonaws.com'
    }

    stages {
        stage('Build') {
            steps {
                // Build the Maven project, skipping tests
                sh 'mvn -s settings.xml -DskipTests install'
            }
            post {
                success {
                    // Archive the generated WAR artifacts upon successful build
                    echo 'Now Archiving...'
                    archiveArtifacts artifacts: '**/target/*.war'
                }
            } 
        }
        stage('UNIT TEST'){
            steps {
                // Execute unit tests using Maven
                sh 'mvn -s settings.xml test'
            }
        }   
        stage('CODE ANALYSIS WITH CHECKSTYLE'){
            steps {
                // Perform code analysis using Checkstyle Maven plugin
                sh 'mvn -s settings.xml checkstyle:checkstyle'
            }
            post {
                success {
                    echo 'Generated Analysis Result'
                }
            }
        } 
        stage('CODE ANALYSIS with SONARQUBE') {
            environment {
                scannerHome = tool "${SONARSCANNER}"
            }
            steps {
                // Analyze the code using SonarQube
                withSonarQubeEnv("${SONARSERVER}") {
                    sh '''${scannerHome}/bin/sonar-scanner -Dsonar.projectKey=vprofile \
                        -Dsonar.projectName=vprofile-repo \
                        -Dsonar.projectVersion=1.0 \
                        -Dsonar.sources=src/ \
                        -Dsonar.java.binaries=target/test-classes/com/visualpathit/account/controllerTest/ \
                        -Dsonar.junit.reportsPath=target/surefire-reports/ \
                        -Dsonar.jacoco.reportsPath=target/jacoco.exec \
                        -Dsonar.java.checkstyle.reportPaths=target/checkstyle-result.xml'''
                }
            }
        }
        stage('add QG') {
            steps {
                // Wait for SonarQube Quality Gate to be processed
                timeout(time: 10, unit: 'MINUTES') {
                    waitForQualityGate abortPipeline: true
                }
            }
        }
        stage('upload artifact to nexus repo') {
            steps {
                // Upload the built WAR artifact to Nexus repository
                nexusArtifactUploader(
                    nexusVersion: 'nexus3',
                    protocol: 'http',
                    nexusUrl: "${NEXUSIP}:${NEXUSPORT}",
                    groupId: 'QA',
                    version: "${env.BUILD_ID}-${env.BUILD_TIMESTAMP}", // Corrected interpolation syntax
                    repository: "${RELEASE_REPO}",
                    credentialsId: "${NEXUS_LOGIN}",
                    artifacts: [
                        [artifactId: 'vproapp',
                        classifier: '',
                        file: 'target/vprofile-v2.war',
                        type: 'war']
                    ]
                )
            }
        }
        stage('Build App Image') {
            steps {
                script {
                    // Build Docker image for the application
                    dockerImage = docker.build("${appRegistry}:$BUILD_NUMBER", "./Docker-files/app/multistage/")
                }
            }
        }
        stage('Upload App Image') { 
            steps {
                script {
                    // Push the Docker image to the registry
                    docker.withRegistry( vprofileRegistry, registrycredential) {
                        dockerImage.push("$BUILD_NUMBER")
                        dockerImage.push('LATEST')
                    }
                }
            }
        }
    } 
}
